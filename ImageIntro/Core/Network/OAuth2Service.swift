import Foundation

// MARK: - –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
enum NetworkError: Error {
    case invalidRequest
    case httpStatusCode(Int)
    case urlRequestError(Error)
    case urlSessionError
    case decodingError(Error)
}

// MARK: - –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
enum AuthServiceError: Error {
    case invalidRequest
}

final class OAuth2Service {
    
    static let shared = OAuth2Service()
    private init() {}
    
    private let tokenStorage = KeychainTokenStorage.shared
    private var task: URLSessionTask?
    private var lastCode: String?
    
    func fetchOAuthToken(code: String, completion: @escaping (Result<String, Error>) -> Void) {
        assert(Thread.isMainThread, "fetchOAuthToken –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
        
        if let task = task {
            if lastCode == code {
                print("[OAuth2Service]: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –∫–æ–¥–æ–º ‚Äî –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                completion(.failure(AuthServiceError.invalidRequest))
                return
            } else {
                print("[OAuth2Service]: –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥—Ä—É–≥–∏–º –∫–æ–¥–æ–º")
                task.cancel()
            }
        } else if lastCode == code {
            print("[OAuth2Service]: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –∫–æ–¥–æ–º")
            completion(.failure(AuthServiceError.invalidRequest))
            return
        }
        
        lastCode = code
        
        guard let request = makeOAuthTokenRequest(code: code) else {
            print("[OAuth2Service]: –û—à–∏–±–∫–∞ ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URLRequest")
            completion(.failure(NetworkError.invalidRequest))
            return
        }
        
        task = URLSession.shared.objectTask(for: request) { [weak self] (result: Result<OAuthTokenResponseBody, Error>) in
            guard let self = self else { return }
            self.task = nil
            self.lastCode = nil
            
            switch result {
            case .success(let body):
                let token = body.accessToken
                self.tokenStorage.token = token
                print("[OAuth2Service]: ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: \(token.prefix(10))...")
                completion(.success(token))
                
            case .failure(let error):
                print("[OAuth2Service]: ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ‚Äî \(error)")
                completion(.failure(error))
            }
        }
        
        task?.resume()
    }
    
    // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥, —Ñ–æ—Ä–º–∏—Ä—É–µ–º POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    private func makeOAuthTokenRequest(code: String) -> URLRequest? {
        guard let url = URL(string: "https://unsplash.com/oauth/token") else {
            print("üö® –ù–µ–≤–µ—Ä–Ω—ã–π URL")
            return nil
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        let parameters = [
            "client_id": Constants.AccessKey,
            "client_secret": Constants.SecretKey,
            "redirect_uri": Constants.RedirectURI,
            "code": code,
            "grant_type": "authorization_code"
        ]
        
        request.httpBody = parameters
            .map { "\($0.key)=\($0.value)" }
            .joined(separator: "&")
            .data(using: .utf8)
        
        request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
        
        return request
    }
}
