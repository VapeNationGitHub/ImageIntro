import Foundation

// MARK: - –°–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final class ProfileService {
    static let shared = ProfileService()
    private init() {}

    private var task: URLSessionTask?
    private var lastToken: String?
    private(set) var profile: Profile? // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –¥–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ

    // MARK: - –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func fetchProfile(_ token: String, completion: @escaping (Result<Profile, Error>) -> Void) {
        assert(Thread.isMainThread)

        // ‚úÖ –£–ø—Ä–æ—Å—Ç–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ–Ω–∫–∏
        guard lastToken != token else {
            completion(.failure(ProfileServiceError.requestAlreadyInProgress))
            return
        }

        task?.cancel()
        lastToken = token

        guard let request = makeRequest(token: token) else {
            completion(.failure(ProfileServiceError.invalidRequest))
            return
        }

        let session = URLSession.shared
        task = session.dataTask(with: request) { [weak self] data, response, error in
            DispatchQueue.main.async {
                guard let self else { return }
                self.task = nil
                self.lastToken = nil

                if let error = error {
                    print("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è: \(error)")
                    completion(.failure(error))
                    return
                }

                guard let data else {
                    print("üö® –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—è")
                    completion(.failure(ProfileServiceError.emptyResponse))
                    return
                }

                do {
                    let decoder = JSONDecoder()
                    let profileResult = try decoder.decode(ProfileResult.self, from: data)

                    let name = [profileResult.firstName, profileResult.lastName].compactMap { $0 }.joined(separator: " ")
                    let loginName = "@\(profileResult.username)"
                    let profile = Profile(
                        username: profileResult.username,
                        name: name,
                        loginName: loginName,
                        bio: profileResult.bio
                    )

                    self.profile = profile // ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    completion(.success(profile))
                } catch {
                    print("üö® –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: \(error)")
                    completion(.failure(error))
                }
            }
        }

        task?.resume()
    }

    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ GET-–∑–∞–ø—Ä–æ—Å–∞
    private func makeRequest(token: String) -> URLRequest? {
        guard let url = URL(string: "https://api.unsplash.com/me") else {
            print("üö® –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è")
            return nil
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        return request
    }
}

// MARK: - –û—à–∏–±–∫–∏ ProfileService
enum ProfileServiceError: Error {
    case invalidRequest
    case requestAlreadyInProgress
    case emptyResponse
}

// MARK: - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Unsplash (–¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON)
struct ProfileResult: Decodable {
    let username: String
    let firstName: String
    let lastName: String?
    let bio: String?

    enum CodingKeys: String, CodingKey {
        case username
        case firstName = "first_name"
        case lastName = "last_name"
        case bio
    }
}

// MARK: - –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ UI-—Å–ª–æ–µ (–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
struct Profile {
    let username: String          // –õ–æ–≥–∏–Ω –∫–∞–∫ –µ—Å—Ç—å
    let name: String              // –ò–º—è + —Ñ–∞–º–∏–ª–∏—è
    let loginName: String         // @username
    let bio: String?              // –ë–∏–æ–≥—Ä–∞—Ñ–∏—è (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
}
