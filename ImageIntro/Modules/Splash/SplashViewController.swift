import UIKit

// MARK: - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ Splash
final class SplashViewController: UIViewController {
    
    // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    private let ShowAuthenticationScreenSegueIdentifier = "ShowAuthenticationScreen"
    private let oauth2Service = OAuth2Service.shared
    private let oauth2TokenStorage = OAuth2TokenStorage.shared
    
    // MARK: - –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        print("‚úÖ SplashViewController –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        if let token = oauth2TokenStorage.token {
            print("üîê –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ TabBar.")
            switchToTabBarController()
        } else {
            print("üü° –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            performSegue(withIdentifier: ShowAuthenticationScreenSegueIdentifier, sender: nil)
        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setNeedsStatusBarAppearanceUpdate()
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        .lightContent
    }
    
    // MARK: - –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É TabBar-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    private func switchToTabBarController() {
        guard let window = UIApplication.shared.windows.first else { fatalError("Invalid Configuration") }
        let tabBarController = UIStoryboard(name: "Main", bundle: .main)
            .instantiateViewController(withIdentifier: "TabBarViewController")
        window.rootViewController = tabBarController
    }
}

extension SplashViewController {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == ShowAuthenticationScreenSegueIdentifier {
            guard
                let navigationController = segue.destination as? UINavigationController,
                let viewController = navigationController.viewControllers[0] as? AuthViewController
            else { fatalError("Failed to prepare for \(ShowAuthenticationScreenSegueIdentifier)") }
            print("‚úÖ prepare: –¥–µ–ª–µ–≥–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
            viewController.delegate = self
        } else {
            super.prepare(for: segue, sender: sender)
        }
    }
}

// MARK: - –î–µ–ª–µ–≥–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
extension SplashViewController: AuthViewControllerDelegate {
    func authViewController(_ vc: AuthViewController, didAuthenticateWithCode code: String) {
        dismiss(animated: true) { [weak self] in
            guard let self = self else { return }
            self.fetchOAuthToken(code)
        }
    }
    
    // MARK: - –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    private func fetchOAuthToken(_ code: String) {
        oauth2Service.fetchOAuthToken(code: code) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ TabBar")
                self.switchToTabBarController()
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: \(error)")
            }
        }
    }
}
